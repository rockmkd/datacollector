<?xml version="1.0" encoding="UTF-8"?>
<!--
  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at
  
      http://www.apache.org/licenses/LICENSE-2.0
      
  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="concept_xl3_ncd_py">
    <title>How It Works</title>
    <conbody>
        <p><indexterm>multithreaded pipelines<indexterm>how it works</indexterm></indexterm>When you
            configure a multithreaded pipeline, you specify the number of threads that the origin
            should use to generate batches of data. You can also configure the maximum number of
                <term>pipeline runners</term> that <ph
                conref="../Reusable_Content/ReusablePhrases.dita#concept_vhs_5tz_xp/pName-long"/>
            uses to perform pipeline processing. </p>
        <p><ph
                conref="../Reusable_Content/ReusablePhrases.dita#concept_vhs_5tz_xp/ph-MultiThread-PipeRunnerDef"
            /></p>
        <p>Origins perform multithreaded processing based on the origin systems they work with, but
            the following is true for all origins that generate multithreaded pipelines: </p>
        <p>When you start the pipeline, the origin creates a number of threads based on the
            multithreaded property configured in the origin. <ph
                conref="../Reusable_Content/ReusablePhrases.dita#concept_vhs_5tz_xp/ph-MultiThread-def1"
            /></p>
        <p><ph
                conref="../Reusable_Content/ReusablePhrases.dita#concept_vhs_5tz_xp/ph-MultiThread-def2"
            /></p>
        <p><ph
                conref="../Reusable_Content/ReusablePhrases.dita#concept_vhs_5tz_xp/ph-MultiThread-batchorder"
            /></p>
        <p>For example, take the following multithreaded pipeline. The HTTP Server origin processes
            HTTP POST requests passed from HTTP clients. When you configure the origin, you specify
            the number of threads to use - in this case, the Max Concurrent Requests property:</p>
        <p><image href="../Graphics/Multithread-HTTPPipeline.png" id="image_mxx_5sd_ry" scale="45"
            /></p>
        <p>Let's say you configure the pipeline to opt out of the Max Runners property. When you do
            this, <ph
                conref="../Reusable_Content/ReusablePhrases.dita#concept_vhs_5tz_xp/pName-long"/>
            generates a matching number of pipeline runners for the number of threads.</p>
        <p>With Max Concurrent Requests set to 5, when you start the pipeline the origin creates
            five threads and <ph
                conref="../Reusable_Content/ReusablePhrases.dita#concept_vhs_5tz_xp/pName-long"/>
            creates five pipeline runners. Upon receiving data, the origin passes a batch to each of
            the pipeline runners for processing.</p>
        <p>Conceptually, the multithreaded pipeline looks like this:</p>
        <p><image href="../Graphics/Multithread-HTTPThreads.png" id="image_r5x_532_ry" scale="70"
            /></p>
        <p>Each pipeline runner performs the processing associated with the rest of the pipeline.
            After a batch is written to pipeline destinations - in this case, Azure Data Lake Store
            1 and 2 - the pipeline runner becomes available for another batch of data. Each batch is
            processed and written as quickly as possible, independently from batches processed by
            other pipeline runners, so the write-order of the batches can differ from the
            read-order.</p>
        <p conref="../Reusable_Content/ReusablePhrases.dita#concept_vhs_5tz_xp/HTTPServer-process-p"/>
    </conbody>
</concept>
