<?xml version="1.0" encoding="UTF-8"?>
<!--

    Copyright 2017 StreamSets Inc.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

-->
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="concept_u13_flh_tw">
 <title>Type Handling</title>
 <conbody>
  <p><indexterm>Groovy Evaluator processor<indexterm>type
                handling</indexterm></indexterm><indexterm>type handling<indexterm>Groovy
                    Evaluator</indexterm></indexterm>Note the following data type information when
            using the Groovy Evaluator:</p>
        <dl>
            <dlentry>
                <dt>Data type of null values</dt>
                <dd>
                    <p>The Groovy Evaluator can associate null values with a data type. For example,
                        if the Groovy Evaluator assigns a null value to an Integer field, the field
                        is returned to the pipeline as an integer with a null value.</p>
                    <p>Use constants in the Groovy code to create a new field of a specific data
                        type with a null value. For example, you can create a new String field with
                        a null value by assigning the type constant NULL_STRING to the field as
                        follows:<codeblock>record.value['new_field'] = NULL_STRING</codeblock></p>
                </dd>
            </dlentry>
            <dlentry>
                <dt>Date fields</dt>
                <dd>Use the String data type to create a new field to store a date with a specific
                    format. For example, the following sample code creates a new String field that
                    stores the current date using the format
                    YYYY-MM-dd:<codeblock> // Define a date object to record the current date
def date = new Date()

for (record in records) {
  try {
    // Create a string field to store the current date with the specified format
    record.value['date'] = date.format('YYYY-MM-dd')
    
    // Write a record to the processor output
    output.write(record)
  } catch (e) {
    // Send a record to error
    log.error(e.toString(), e)
    error.write(record, e.toString())
  }
}</codeblock></dd>
            </dlentry>
        </dl>
 </conbody>
</concept>
