<?xml version="1.0" encoding="UTF-8"?>
<!--

    Copyright 2017 StreamSets Inc.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

-->
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="concept_jhw_ttm_3z">
 <title>Scroll Timeout</title>
 <shortdesc>An Elasticsearch query can retrieve large numbers of documents from a single search
        request. This allows the Elasticsearch origin to run a single query, and then read multiple
        batches of data from the scroll until no results are left. An Elasticsearch scroll functions
        like a cursor in a traditional database.</shortdesc>
 <conbody>
  <p><indexterm>Elasticsearch origin<indexterm>scroll
                timeout</indexterm></indexterm><indexterm>Elasticsearch origin<indexterm>search
                    context</indexterm></indexterm><indexterm>scroll timeout<indexterm>Elasticsearch
                    origin</indexterm></indexterm><indexterm>search context<indexterm>Elasticsearch
                    origin</indexterm></indexterm>To run an Elasticsearch query using the scroll
            API, you must set a scroll timeout. The scroll timeout tells Elasticsearch how long it
            should keep the search context alive. The scroll timeout must be long enough for a
            single batch to be fully read. When the origin reads another batch from the results, the
            scroll timeout is reset. </p>
        <p>If the scroll timeout value is exceeded, Elasticsearch clears the scroll and the last
            saved offset, and the origin must run the query again. In batch mode, the origin reads
            all data returned from the query. In incremental mode, the origin begins reading from
            the initial offset configured for the origin.</p>
        <p>Enter the scroll timeout using <xref
                href="https://www.elastic.co/guide/en/elasticsearch/reference/5.2/common-options.html#time-units"
                format="html" scope="external">Elasticsearch duration time units</xref>. For
            example, enter <codeph>1m</codeph> to set a one minute timeout, or enter
                <codeph>1h</codeph> to set a one hour timeout.</p>
        <p>Optionally, you can configure the origin to delete the scroll when the pipeline stops.
            When configured, <ph
                conref="../Reusable_Content/ReusablePhrases.dita#concept_vhs_5tz_xp/pName-long"/>
            clears the scroll as soon as the pipeline stops, rather than waiting for the scroll
            timeout value to be exceeded. Keeping a scroll window open consumes Elasticsearch
            resources. To free up those resources, configure the origin to clear the scroll when it
            is no longer being used.</p>
        <p>Clearing the scroll also clears the last saved offset, and so is essentially like
            resetting the origin. When the pipeline continues, the origin processes all available
            data instead of processing data from the last saved offset.</p>
 </conbody>
</concept>
