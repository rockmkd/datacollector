<?xml version="1.0" encoding="UTF-8"?>
<!--

    Copyright 2017 StreamSets Inc.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

-->
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="concept_vdt_dxc_tx">
 <title>SOQL Query</title>
 <shortdesc>When you configure the Salesforce origin to query existing data, you define the SOQL
        query that the origin uses to return data from Salesforce. The Salesforce origin requires a
        WHERE and ORDER BY clause in the query. </shortdesc>
 <conbody>
        <p><indexterm>Salesforce origin<indexterm>SOQL query</indexterm></indexterm><indexterm>SOQL
                    query<indexterm>Salesforce origin</indexterm></indexterm>Use the following
            guidelines when you define the WHERE and ORDER BY clauses:</p>
        <dl>
            <dlentry>
                <dt>In the WHERE clause, include the offset field and the offset value</dt>
                <dd>The origin uses an offset field and value to determine the data that is
                    returned. Include both in the WHERE clause of the query. </dd>
            </dlentry>
            <dlentry>
                <dt>Use the OFFSET constant to represent the offset value</dt>
                <dd>In the WHERE clause, use ${OFFSET} to represent the offset value. </dd>
                <dd>For example, when you start a pipeline, the following query returns all data
                    from the object where the data in the offset field is greater than the initial
                    offset
                        value:<codeblock>SELECT Id, Name FROM &lt;object> WHERE &lt;offset field> > ${OFFSET}</codeblock><note
                        type="tip">When the offset values are strings, enclose ${OFFSET} in single
                        quotation marks.</note></dd>
            </dlentry>
            <dlentry>
                <dt>In the ORDER BY clause, include the offset field as the first field</dt>
                <dd>To avoid returning duplicate data, use the offset field as the first field in
                    the ORDER BY clause.</dd>
                <dd>
                    <note>Using a field that is not the <systemoutput>Id</systemoutput> field in the
                        ORDER BY clause can slow performance. </note>
                </dd>
            </dlentry>
        </dl>
        <p>The complete SOQL query must use the following syntax:</p>
        <codeblock>SELECT &lt;offset field>, &lt;field name1>, &lt;field name2>, ... FROM &lt;object> WHERE &lt;offset field> > ${OFFSET} ORDER BY &lt;offset field></codeblock>
        <p>If you specify <codeph>SELECT * FROM &lt;object></codeph> in the SOQL query, the origin
            expands <codeph>*</codeph> to all fields in the Salesforce object that are accessible to
            the configured user. Note that the origin adds components of compound fields to the
            query, rather than adding the compound fields themselves. For example, the origin adds
            BillingStreet, BillingCity, etc., rather than adding BillingAddress. Similarly, it adds
            Location__Latitude__s and Location__Longitude__s rather than Location__c.</p>
    </conbody>
</concept>
