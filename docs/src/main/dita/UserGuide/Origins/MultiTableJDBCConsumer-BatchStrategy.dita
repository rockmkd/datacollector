<?xml version="1.0" encoding="UTF-8"?>
<!--
  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at
  
      http://www.apache.org/licenses/LICENSE-2.0
      
  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="concept_n5t_zgx_4y">
 <title>Batch Strategy</title>
 <conbody>
        <p><indexterm>JDBC Multitable Consumer origin<indexterm>batch
                strategy</indexterm></indexterm><indexterm>batch strategy<indexterm>JDBC Multitable
                    Consumer origin</indexterm></indexterm>Each origin thread creates a batch of
            data from a single table. You can define one of the following strategies that the
            threads use to create each batch:</p>
        <p>
            <dl>
                <dlentry>
                    <dt>Process All Available Rows from the Table</dt>
                    <dd>Each thread creates multiple batches of data from one table, until all
                        available rows are read from that table. The thread runs one SQL query for
                        all batches created from the table. Then, the thread switches to the next
                        available table, running another SQL query to read all available rows from
                        that table.</dd>
                    <dd>For example, let's say that the batch size for the origin is set to 100. The
                        origin is configured to use two concurrent threads and to read from four
                        tables, each of which contains 1,000 rows. The first thread runs one SQL
                        query to create 10 batches of 100 rows each from table1, while the second
                        thread uses the same strategy to read data from table2. When table1 and
                        table2 are fully read, the threads switch to table3 and table4 and complete
                        the same process. When the first thread finishes reading from table3, the
                        thread switches back to the next available table to read all available data
                        from the last saved offset.</dd>
                </dlentry>
                <dlentry>
                    <dt>Switch Tables</dt>
                    <dd>Each thread creates a batch of data from one table, and then switches to the
                        next available table to create the next batch. The thread runs an initial
                        SQL query to create the first batch from the table. The database caches the
                        remaining rows in a result set in the database. When the same thread
                        switches back to the same table to create another batch, it retrieves the
                        rows from the result set cache in the database rather than running another
                        SQL query. No other thread can read from that table until the result set is
                        closed. </dd>
                    <dd>When you configure a switch table strategy, define the result set cache size
                        and the number of batches that a thread can create from the result set.
                        After a thread creates the configured number of batches, the database closes
                        the result set and then a different thread can read from the table.</dd>
                    <dd><note>By default, the origin instructs the database to cache an unlimited number of result sets. A
                            thread can create an unlimited number of batches from that result
                            set.</note></dd>
                    <dd>For example, let's say that the batch size for the origin is set to 100. The
                        origin is configured to use two concurrent threads and to read from four
                        tables, each of which contains 10,000 rows. You set the result set cache
                        size to 500 and set the number of batches read from the result set to 5. </dd>
                    <dd>Thread1 runs an SQL query on table1, which returns all 10,000 rows. The
                        thread creates a batch when it reads the first 100 rows. The next 400 rows
                        are cached as a result set in the database. Thread1 then switches to table3
                        and repeats the same process. After creating a batch from table3, thread1
                        switches back to table1 and retrieves the next batch of rows from the result
                        set cache in the database.</dd>
                    <dd>After thread1 creates five batches using the result set cache for table1,
                        the database closes the result set cache. Thread1 switches to the next
                        available table. A different thread runs an SQL query to read additional
                        rows from table1, beginning from the last saved offset.</dd>
                </dlentry>
            </dl>
        </p>
 </conbody>
</concept>
