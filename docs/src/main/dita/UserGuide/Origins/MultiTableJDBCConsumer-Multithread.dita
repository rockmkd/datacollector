<?xml version="1.0" encoding="UTF-8"?>
<!--
  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at
  
      http://www.apache.org/licenses/LICENSE-2.0
      
  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="concept_tz5_fw5_gz">
 <title>Multithreaded Processing</title>
 <shortdesc>The JDBC Multitable Consumer origin performs parallel processing and enables the
        creation of a multithreaded pipeline. </shortdesc>
 <conbody>
  <p><indexterm>JDBC Multitable Consumer origin<indexterm>multithreaded
                processing</indexterm></indexterm><indexterm>Number of Threads<indexterm>JDBC
                    Multitable Consumer</indexterm></indexterm>When you start the pipeline, the JDBC
            Multitable Consumer origin retrieves the list of tables defined in the table
            configuration. The origin then creates multiple concurrent threads based on the Number
            of Threads property. Each thread reads data from a single table.<note>The Maximum Pool
                Size property on the Advanced tab defines the maximum number of connections the
                origin can make to the database. It must be equal to or greater than the value
                defined for the Number of Threads property.</note></p>
        <p><ph
                conref="../Reusable_Content/ReusablePhrases.dita#concept_vhs_5tz_xp/ph-MultiThread-def1_JDBCModified"
            /></p>
        <p>Each pipeline runner can process one batch at a time, just like a pipeline that runs on a
            single thread. Each batch is processed and written as quickly as possible, independent
            from other batches processed by other pipeline runners, so batches may be written
            differently from the read-order. When the flow of data slows, the pipeline runners wait
            idly until they are needed.</p>
        <p>When a thread finishes reading from a table, it switches to the next available table and
            continues to pass batches to a pipeline runner. The <xref
                href="MultiTableJDBCConsumer-BatchStrategy.dita#concept_n5t_zgx_4y">batch
                strategy</xref> that you define for the origin determines when a thread switches to
            the next table.</p>
        <p>For more information about multithreaded pipelines, see <xref
                href="../Multithreaded_Pipelines/MultithreadedPipelines_Overview.dita#concept_zpp_2xc_py"
            />.</p>
        <section id="section_fvq_bpw_hz">
            <title>Example</title>
            <p>Say you are reading from ten tables. You set the Number of Threads property to 5 and
                the Maximum Pool Size property to 6. When you start the pipeline, the origin
                retrieves the list of tables. The origin then creates five threads to read from the
                first five tables, and <ph
                    conref="../Reusable_Content/ReusablePhrases.dita#concept_vhs_5tz_xp/pName-long"
                /> creates five pipeline runners. Upon receiving data, a thread passes a batch to
                one of the pipeline runners for processing.</p>
            <p>Each pipeline runner performs the processing associated with the rest of the
                pipeline. After a batch is written to pipeline destinations, the pipeline runner
                becomes available for another batch of data. </p>
            <p
                conref="../Reusable_Content/ReusablePhrases.dita#concept_vhs_5tz_xp/HTTPServer-process-p"/>
            <p>When a thread finishes reading from a table, it switches to the next available table
                and continues to pass batches to a pipeline runner.</p>
        </section>
 </conbody>
</concept>
