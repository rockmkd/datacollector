<?xml version="1.0" encoding="UTF-8"?>
<!--

    Copyright 2017 StreamSets Inc.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

-->
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="concept_ddx_154_lz">
 <title>Recommended Implementation</title>
 <conbody>
  <p><indexterm>Pipeline Finisher executor<indexterm>recommended
                implementation</indexterm></indexterm><indexterm>implementation
                    recommendation<indexterm>Pipeline Finisher executor</indexterm></indexterm>The
            Pipeline Finisher executor is designed to stop and transition a pipeline to a Finished
            state after processing available data in the origin system. For example, you might use
            the executor to stop the pipeline after the JDBC Query Consumer processes all available
            data specified in the query.</p>
        <p>When an origin generates only the no-more-data event, you can simply connect the event
            output to the Pipeline Finisher executor. When an origin generates multiple event types,
            you need to ensure that the Pipeline Finisher stops the pipeline only after receiving
            the no-more-data event.</p>
        <p>Here are some ways you can ensure the executor receives only the no-more-data event:<dl>
                <dlentry>
                    <dt>Configure a precondition for the Pipeline Finisher</dt>
                    <dd>In the executor, add a precondition to allow only a no-more-data event into
                        the stage to trigger the executor. You can use the following
                        expression:<codeblock>${record:eventType() == 'no-more-data'}</codeblock></dd>
                    <dd>
                        <note type="tip">Records dropped because of a precondition are handled based
                            on the stage error handling configuration. So to avoid racking up error
                            records, you might also configure the Pipeline Finisher executor to
                            discard error records.</note>
                    </dd>
                    <dd>Use this method when pipeline logic allows you to discard other event types
                        generated by the origin.</dd>
                </dlentry>
                <dlentry>
                    <dt>Add a Stream Selector before the Pipeline Finisher</dt>
                    <dd>You can add a Stream Selector between the origin and the executor to route
                        only the no-more-data event to the Pipeline Finisher. Use this option when
                        you want to pass other event types to a different branch for processing. </dd>
                    <dd>For example, say you're using JDBC Query Consumer origin, which generates
                        no-more-data, query success, and query failure events. And say you want to
                        store the query success and query failure events. You can use a Stream
                        Selector with the following condition to route the no-more-data event to the
                        Pipeline
                        Finisher:<codeblock>${record:eventType() == 'no-more-data'}</codeblock></dd>
                    <dd>Then you can connect the default stream - which receives the query success
                        and query failure events - to a destination for storage.</dd>
                </dlentry>
            </dl></p>
 </conbody>
</concept>
