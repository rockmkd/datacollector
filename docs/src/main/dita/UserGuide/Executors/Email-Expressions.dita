<?xml version="1.0" encoding="UTF-8"?>
<!--

    Copyright 2017 StreamSets Inc.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

-->
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="concept_tgb_vbm_wz">
    <title>Using Expressions</title>
    <conbody>
        <p><indexterm>Email executor<indexterm>using expressions</indexterm></indexterm>You can use
            expressions in any email property in the Email executor. For example, you can base the
            condition on information in the event record, and include information about the pipeline
            in the email message. </p>
        <p>You can use any functions that work for your use case, but here are some suggestions:<dl>
                <dlentry>
                    <dt>pipeline functions</dt>
                    <dd>
                        <p>You can use the pipeline functions to provide pipeline information such
                            as the pipeline name and ID. </p>
                        <p>For example, you can use <codeph>pipeline:title()</codeph> and
                                <codeph>pipeline:id()</codeph> in the email message to indicate the
                            pipeline that generated the event and email. You might use the following
                            message when the email is configured to send after the Pipeline Finisher
                            stops the
                            pipeline:<codeblock>Heads up! ${pipeline:title()}, ${pipeline:id()}, has successfully completed.</codeblock></p>
                    </dd>
                </dlentry>
                <dlentry>
                    <dt>record functions</dt>
                    <dd>You can use record functions to provide information from the event record.
                        For example, you should use <codeph>record:eventType()</codeph> in the
                        condition if the pipeline routes multiple types of events to the Email
                        executor and you want to send the email only upon receiving a particular
                        event type. If you use the executor with the JDBC Query Consumer, you can
                        use the following condition to send the email when a query successfully
                            completes:<codeblock>${record:eventType() == 'jdbc-query-success'}</codeblock><p>You
                            might also use the <codeph>record:eventCreation()</codeph> function to
                            include the time that the event occurred in the message. The creation
                            time is returned in epoch time, so to create a readable timestamp, you
                            can use the following
                            expression:<codeblock>${time:millisecondsToDateTime(record:eventCreation() * 1000)}</codeblock></p><p>And
                            of course, you can use the <codeph>record:value</codeph> function to
                            include information from the event record, such as the query that
                            successfully completed.</p></dd>
                </dlentry>
                <dlentry>
                    <dt>file functions</dt>
                    <dd>You can use file functions to provide information about a closed or written
                        file. </dd>
                    <dd>For example, you might use the <codeph>file:fileName</codeph> function to
                        extract the name of a closed file from the filepath field of a Hadoop FS
                        file-closure event as
                        follows:<codeblock>${file:fileName(record:value('/filepath'))}</codeblock></dd>
                </dlentry>
            </dl></p>
    </conbody>
</concept>
