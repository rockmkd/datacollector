<?xml version="1.0" encoding="UTF-8"?>
<!--

    Copyright 2017 StreamSets Inc.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

-->
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="concept_lkk_rwx_jz">
 <title>Application Properties</title>
 <conbody>
  <p><indexterm>Spark executor<indexterm>application details for
                YARN</indexterm></indexterm><indexterm>application properties<indexterm>Spark
                    executor with YARN</indexterm></indexterm>When using the Spark executor with
            YARN, you specify an application name. The application name displays in the cluster
            manager and Spark server logs, so use a distinctive name to enable distinguishing the
            Spark application from others. For example, <ph
                conref="../Reusable_Content/ReusablePhrases.dita#concept_vhs_5tz_xp/SparkAppName-ph"
            />. </p>
        <p>In the executor, you can enable verbose logging to help test the pipeline and debug the
            application. </p>
        <p>Configure additional application details based on the language used to write the application:<dl>
                <dlentry>
                    <dt>Java or Scala</dt>
                    <dd>For applications written in Java or Scala, you specify the main class and
                        application resource - the full path to the primary JAR or file.</dd>
                    <dd>You can specify additional arguments and JARs to use. You can also pass
                        additional files to the application using the <codeph>--files</codeph>
                        protocol. </dd>
                </dlentry>
                <dlentry>
                    <dt>Python</dt>
                    <dd>For applications written in Python, you specify the application resource -
                        the full path to the primary Python file - and any required dependencies.
                        You can define application arguments and pass additional files to the
                        application using the <codeph>--files</codeph> protocol. </dd>
                </dlentry>
            </dl></p>
        <p>
            <note>Make sure the user that runs <ph
                    conref="../Reusable_Content/ReusablePhrases.dita#concept_vhs_5tz_xp/pName-long"
                /> - or the Hadoop proxy user, if configured - has read permission on all required
                paths.</note>
        </p>
 </conbody>
</concept>
