<?xml version="1.0" encoding="UTF-8"?>
<!--

    Copyright 2017 StreamSets Inc.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

-->
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="concept_jyt_lb5_js">
 <title>Quick Reference</title>
 <conbody>
  <p><indexterm>regular expressions<indexterm>quick reference</indexterm></indexterm>The following
   table includes some details you might find helpful when creating a regular expression:<table
    frame="all" rowsep="1" colsep="1" id="table_d3t_sh5_js">
    <tgroup cols="3">
     <colspec colname="c1" colnum="1" colwidth="1*"/>
     <colspec colname="c2" colnum="2" colwidth="2.8*"/>
     <colspec colname="c3" colnum="3" colwidth="2.62*"/>
     <thead>
      <row>
       <entry>Character</entry>
       <entry>Description</entry>
       <entry>Examples</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>[ ]</entry>
       <entry>Use brackets to define character classes. </entry>
       <entry>[0-9][0-9][0-9] represents 3 digits ranging from 0 through 9, inclusive. </entry>
      </row>
      <row>
       <entry>-</entry>
       <entry>Use the hyphen to define ranges.</entry>
       <entry>
        <p>[a-z] defines one lowercase letter from a to z.</p>
        <p>[A-Z] defines one uppercase letter from A to Z.</p>
       </entry>
      </row>
      <row>
       <entry>|</entry>
       <entry>Indicates an alternate option to the character or group being defined.</entry>
       <entry>[a-z | A-Z] represents a single upper or lowercase letter. </entry>
      </row>
      <row>
       <entry>( ) </entry>
       <entry>Use parentheses to create groups, atomic groups, or lookarounds.</entry>
       <entry>([0-9][0-9][0-9])(-|.)([0-9][0-9][0-9])(-|.)([0-9][0-9][0-9][0-9]) represents phone
        numbers with area codes that are separated by dashes or periods as follows: 415-555-5555 and
        415.555.5555. </entry>
      </row>
      <row>
       <entry>&lt; > </entry>
       <entry>Use angle brackets to define named capture groups. Use the following syntax:
        <codeblock>(?&lt;groupName> ...) </codeblock>to set up a named field extraction.</entry>
       <entry/>
      </row>
      <row>
       <entry>^</entry>
       <entry>Use a carat to negate a character class. </entry>
       <entry>[^A-G] defines a character that is not an uppercase letter from A to G.</entry>
      </row>
      <row>
       <entry>.</entry>
       <entry>A wildcard that represents any single character except newline or other special
        characters.</entry>
       <entry/>
      </row>
      <row>
       <entry>&amp;&amp;</entry>
       <entry>Use two ampersands to indicate the union of two ranges. </entry>
       <entry>[\w&amp;&amp;[^1-9] represents all word characters except 1-9. </entry>
      </row>
      <row>
       <entry>? </entry>
       <entry>A quantifier that represents zero or one instance of the preceding character or group. </entry>
       <entry>B-?7 represents B7 or B-7.</entry>
      </row>
      <row>
       <entry>+</entry>
       <entry>A quantifier that represents one or more instances of the preceding character or
        group.</entry>
       <entry>([0-9][0-9][0-9])-+([0-9][0-9][0-9][0-9]) represents phone numbers that area codes:
        415-555-5555 and 555-5555. </entry>
      </row>
      <row>
       <entry>* </entry>
       <entry>A quantifier that represents zero or more instances of the preceding character or
        group. </entry>
       <entry>([0-9][0-9][0-9][0-9][0-9])-([0-9][0-9][0-9][0-9])* represents 5- and 9-digit zip
        codes. </entry>
      </row>
      <row>
       <entry>\</entry>
       <entry>Use the backslash as an escape character.</entry>
       <entry/>
      </row>
      <row>
       <entry>\\</entry>
       <entry>Represents a single backslash</entry>
       <entry/>
      </row>
      <row>
       <entry>\w </entry>
       <entry>Represents a word character - includes alphanumeric characters and the underscore. </entry>
       <entry>\w\w\w-\w\w\w\w\w can represent an error code, such as SVR-30243.</entry>
      </row>
      <row>
       <entry>\W</entry>
       <entry>Represents a non-word character - includes everything except alphanumeric characters
        and the underscore. </entry>
       <entry/>
      </row>
      <row>
       <entry>\d</entry>
       <entry>Represents a digit. Shorthand for 0-9. </entry>
       <entry>(\d\d\d\d\d)-(\d\d\d\d)* represents a 9-digit zip code.</entry>
      </row>
      <row>
       <entry>\D</entry>
       <entry>Represents a non-digit character.</entry>
       <entry>\D&amp;&amp;\S represents the alphabet in either case.</entry>
      </row>
      <row>
       <entry>\s</entry>
       <entry>Represents a whitespace character - includes space, tab, line break and form
        feed.</entry>
       <entry/>
      </row>
      <row>
       <entry>\S</entry>
       <entry>Represents a non-space character - includes everything except the space, tab, line
        break, and form feed characters.</entry>
       <entry/>
      </row>
      <row>
       <entry>\t</entry>
       <entry>Tab character.</entry>
       <entry/>
      </row>
      <row>
       <entry>\r</entry>
       <entry>Return character.</entry>
       <entry/>
      </row>
      <row>
       <entry>\n</entry>
       <entry>Line break or newline character.</entry>
       <entry/>
      </row>
      <row>
       <entry>\f</entry>
       <entry>Form feed character.</entry>
       <entry/>
      </row>
     </tbody>
    </tgroup>
   </table></p>
 </conbody>
</concept>
