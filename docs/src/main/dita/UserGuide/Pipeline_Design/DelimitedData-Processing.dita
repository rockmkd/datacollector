<?xml version="1.0" encoding="UTF-8"?>
<!--

    Copyright 2017 StreamSets Inc.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

-->
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="concept_hrt_tt4_fs">
 <title>Processing List Type Data</title>
 <shortdesc>For delimited data in the list-map record type, you can use standard record functions to
        process data. For data in the list record type, you should either use the delimited data
        functions or include the full field path in standard record functions. </shortdesc>
 <conbody>
  <p><indexterm>delimited data<indexterm>processing list type
                data</indexterm></indexterm><indexterm>list record type<indexterm>creating
                    expressions</indexterm></indexterm>The expression language provides delimited
            data functions to enable easier access to list record details, such as the value of a
            header or whether the record includes duplicate headers. </p>
  <p>For example, you can use the <codeph>record:dValue('&lt;header>')</codeph> delimited data
      function to return the value associated with the specified header. Continuing with the example
      above, the following function returns user ID information:</p>
  <codeblock>${record:dValue('UserID')}</codeblock>
  <p>With the User ID header index, you can use the <codeph>record:dValueAt(&lt;header
                index>)</codeph> function to return the same information, as
            follows:<codeblock>${record:dValueAt(2)}</codeblock></p>
  <p>But if you prefer, you can use the field path to the data with the standard record function,
                <codeph>record:value('&lt;field
            path>')</codeph>:<codeblock>${record:value('[2]/value')}</codeblock></p>
  <p>Note that the field path references the column index and the "value" key.</p>
  <p>
   <note type="tip">You can use the <codeph>record:dToMap()</codeph> function to convert the record
    to a map, and then use standard functions for record processing.</note>
  </p>
  <p>For the full list of delimited data record functions and their syntax, see <xref
        href="../Expression_Language/RecordFunc-Delimited.dita#concept_s2c_q14_fs"/>.</p>
 </conbody>
</concept>
